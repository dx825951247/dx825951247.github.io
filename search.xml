<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[Redis异常Unexpected end of stream解决方案]]></title>
      <url>/redisUnexpectedEndOfStream.html</url>
      <content type="html"><![CDATA[<p>　　项目测试环境没问题，正式环境Redis读写数据有时候会抛异常：<code>Unexpected end of stream.</code><br><a id="more"></a><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div></pre></td><td class="code"><pre><div class="line">org.springframework.data.redis.RedisConnectionFailureException: Unexpected end of stream.; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Unexpected end of stream.</div><div class="line">	at org.springframework.data.redis.connection.jedis.JedisExceptionConverter.convert(JedisExceptionConverter.java:47) ~[spring-data-redis-1.6.1.RELEASE.jar:1.6.1.RELEASE]</div><div class="line">	at org.springframework.data.redis.connection.jedis.JedisExceptionConverter.convert(JedisExceptionConverter.java:36) ~[spring-data-redis-1.6.1.RELEASE.jar:1.6.1.RELEASE]</div><div class="line">	at org.springframework.data.redis.PassThroughExceptionTranslationStrategy.translate(PassThroughExceptionTranslationStrategy.java:37) ~[spring-data-redis-1.6.1.RELEASE.jar:1.6.1.RELEASE]</div><div class="line">	at org.springframework.data.redis.FallbackExceptionTranslationStrategy.translate(FallbackExceptionTranslationStrategy.java:37) ~[spring-data-redis-1.6.1.RELEASE.jar:1.6.1.RELEASE]</div><div class="line">	at org.springframework.data.redis.connection.jedis.JedisConnection.convertJedisAccessException(JedisConnection.java:210) ~[spring-data-redis-1.6.1.RELEASE.jar:1.6.1.RELEASE]</div><div class="line">	at org.springframework.data.redis.connection.jedis.JedisConnection.get(JedisConnection.java:1122) ~[spring-data-redis-1.6.1.RELEASE.jar:1.6.1.RELEASE]</div><div class="line">	at org.springframework.data.redis.core.DefaultValueOperations$1.inRedis(DefaultValueOperations.java:46) ~[spring-data-redis-1.6.1.RELEASE.jar:1.6.1.RELEASE]</div><div class="line">	at org.springframework.data.redis.core.AbstractOperations$ValueDeserializingRedisCallback.doInRedis(AbstractOperations.java:52) ~[spring-data-redis-1.6.1.RELEASE.jar:1.6.1.RELEASE]</div><div class="line">	at org.springframework.data.redis.core.RedisTemplate.execute(RedisTemplate.java:191) ~[spring-data-redis-1.6.1.RELEASE.jar:1.6.1.RELEASE]</div><div class="line">	at org.springframework.data.redis.core.RedisTemplate.execute(RedisTemplate.java:153) ~[spring-data-redis-1.6.1.RELEASE.jar:1.6.1.RELEASE]</div><div class="line">	at org.springframework.data.redis.core.AbstractOperations.execute(AbstractOperations.java:86) ~[spring-data-redis-1.6.1.RELEASE.jar:1.6.1.RELEASE]</div><div class="line">	at org.springframework.data.redis.core.DefaultValueOperations.get(DefaultValueOperations.java:43) ~[spring-data-redis-1.6.1.RELEASE.jar:1.6.1.RELEASE]</div><div class="line">	at cn.com.ocj.usercenter.util.TokenManager.getString(TokenManager.java:71) ~[classes/:na]</div><div class="line">	at cn.com.ocj.usercenter.util.TokenManager.getRedisToken(TokenManager.java:128) ~[classes/:na]</div><div class="line">	at cn.com.ocj.usercenter.service.impl.UserServiceImpl.getLoginStatus(UserServiceImpl.java:283) ~[classes/:na]</div><div class="line">	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_91]</div><div class="line">	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_91]</div><div class="line">	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_91]</div><div class="line">	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_91]</div><div class="line">	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:317) ~[spring-aop-4.1.1.RELEASE.jar:4.1.1.RELEASE]</div><div class="line">	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:190) [spring-aop-4.1.1.RELEASE.jar:4.1.1.RELEASE]</div><div class="line">	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:157) [spring-aop-4.1.1.RELEASE.jar:4.1.1.RELEASE]</div><div class="line">	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:98) ~[spring-tx-4.1.1.RELEASE.jar:4.1.1.RELEASE]</div><div class="line">	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:266) ~[spring-tx-4.1.1.RELEASE.jar:4.1.1.RELEASE]</div><div class="line">	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:95) ~[spring-tx-4.1.1.RELEASE.jar:4.1.1.RELEASE]</div><div class="line">	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179) [spring-aop-4.1.1.RELEASE.jar:4.1.1.RELEASE]</div><div class="line">	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92) [spring-aop-4.1.1.RELEASE.jar:4.1.1.RELEASE]</div><div class="line">	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179) [spring-aop-4.1.1.RELEASE.jar:4.1.1.RELEASE]</div><div class="line">	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:207) ~[spring-aop-4.1.1.RELEASE.jar:4.1.1.RELEASE]</div><div class="line">	at com.sun.proxy.$Proxy28.getLoginStatus(Unknown Source) ~[na:na]</div><div class="line">	at cn.com.ocj.usercenter.controller.UserController.getLoginStatus(UserController.java:101) ~[classes/:na]</div><div class="line">	at cn.com.ocj.usercenter.controller.UserController$$FastClassBySpringCGLIB$$30df6a33.invoke(<span class="tag">&lt;<span class="name">generated</span>&gt;</span>) [spring-core-4.1.1.RELEASE.jar:na]</div><div class="line">	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204) [spring-core-4.1.1.RELEASE.jar:4.1.1.RELEASE]</div><div class="line">	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:717) [spring-aop-4.1.1.RELEASE.jar:4.1.1.RELEASE]</div><div class="line">	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:157) [spring-aop-4.1.1.RELEASE.jar:4.1.1.RELEASE]</div><div class="line">	at cn.com.ocj.usercenter.aop.ControllerAdvice.invoke(ControllerAdvice.java:68) [classes/:na]</div><div class="line">	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:168) [spring-aop-4.1.1.RELEASE.jar:4.1.1.RELEASE]</div><div class="line">	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92) [spring-aop-4.1.1.RELEASE.jar:4.1.1.RELEASE]</div><div class="line">	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179) [spring-aop-4.1.1.RELEASE.jar:4.1.1.RELEASE]</div><div class="line">	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:653) [spring-aop-4.1.1.RELEASE.jar:4.1.1.RELEASE]</div><div class="line">	at cn.com.ocj.usercenter.controller.UserController$$EnhancerBySpringCGLIB$$eca12e1d.getLoginStatus(<span class="tag">&lt;<span class="name">generated</span>&gt;</span>) [spring-core-4.1.1.RELEASE.jar:na]</div><div class="line">	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_91]</div><div class="line">	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_91]</div><div class="line">	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_91]</div><div class="line">	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_91]</div><div class="line">	at org.springframework.web.method.support.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:215) [spring-web-4.1.1.RELEASE.jar:4.1.1.RELEASE]</div><div class="line">	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:132) [spring-web-4.1.1.RELEASE.jar:4.1.1.RELEASE]</div><div class="line">	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:104) [spring-webmvc-4.1.1.RELEASE.jar:4.1.1.RELEASE]</div><div class="line">	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandleMethod(RequestMappingHandlerAdapter.java:781) [spring-webmvc-4.1.1.RELEASE.jar:4.1.1.RELEASE]</div><div class="line">	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:721) [spring-webmvc-4.1.1.RELEASE.jar:4.1.1.RELEASE]</div><div class="line">	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:83) [spring-webmvc-4.1.1.RELEASE.jar:4.1.1.RELEASE]</div><div class="line">	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:943) [spring-webmvc-4.1.1.RELEASE.jar:4.1.1.RELEASE]</div><div class="line">	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:877) [spring-webmvc-4.1.1.RELEASE.jar:4.1.1.RELEASE]</div><div class="line">	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:966) [spring-webmvc-4.1.1.RELEASE.jar:4.1.1.RELEASE]</div><div class="line">	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:868) [spring-webmvc-4.1.1.RELEASE.jar:4.1.1.RELEASE]</div><div class="line">	at javax.servlet.http.HttpServlet.service(HttpServlet.java:648) [servlet-api.jar:na]</div><div class="line">	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:842) [spring-webmvc-4.1.1.RELEASE.jar:4.1.1.RELEASE]</div><div class="line">	at javax.servlet.http.HttpServlet.service(HttpServlet.java:729) [servlet-api.jar:na]</div><div class="line">	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:292) [catalina.jar:8.0.32]</div><div class="line">	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:207) [catalina.jar:8.0.32]</div><div class="line">	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52) [tomcat-websocket.jar:8.0.32]</div><div class="line">	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:240) [catalina.jar:8.0.32]</div><div class="line">	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:207) [catalina.jar:8.0.32]</div><div class="line">	at com.thetransactioncompany.cors.CORSFilter.doFilter(CORSFilter.java:198) [cors-filter-2.5.jar:2.5]</div><div class="line">	at com.thetransactioncompany.cors.CORSFilter.doFilter(CORSFilter.java:244) [cors-filter-2.5.jar:2.5]</div><div class="line">	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:240) [catalina.jar:8.0.32]</div><div class="line">	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:207) [catalina.jar:8.0.32]</div><div class="line">	at cn.com.ocj.usercenter.filter.UserLoginFilter.doFilter(UserLoginFilter.java:58) [classes/:na]</div><div class="line">	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:240) [catalina.jar:8.0.32]</div><div class="line">	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:207) [catalina.jar:8.0.32]</div><div class="line">	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:88) [spring-web-4.1.1.RELEASE.jar:4.1.1.RELEASE]</div><div class="line">	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-4.1.1.RELEASE.jar:4.1.1.RELEASE]</div><div class="line">	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:240) [catalina.jar:8.0.32]</div><div class="line">	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:207) [catalina.jar:8.0.32]</div><div class="line">	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:212) [catalina.jar:8.0.32]</div><div class="line">	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:106) [catalina.jar:8.0.32]</div><div class="line">	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:502) [catalina.jar:8.0.32]</div><div class="line">	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:141) [catalina.jar:8.0.32]</div><div class="line">	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:79) [catalina.jar:8.0.32]</div><div class="line">	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:616) [catalina.jar:8.0.32]</div><div class="line">	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:88) [catalina.jar:8.0.32]</div><div class="line">	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:522) [catalina.jar:8.0.32]</div><div class="line">	at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1095) [tomcat-coyote.jar:8.0.32]</div><div class="line">	at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:672) [tomcat-coyote.jar:8.0.32]</div><div class="line">	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1500) [tomcat-coyote.jar:8.0.32]</div><div class="line">	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1456) [tomcat-coyote.jar:8.0.32]</div><div class="line">	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [na:1.8.0_91]</div><div class="line">	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [na:1.8.0_91]</div><div class="line">	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-util.jar:8.0.32]</div><div class="line">	at java.lang.Thread.run(Thread.java:745) [na:1.8.0_91]</div><div class="line">Caused by: redis.clients.jedis.exceptions.JedisConnectionException: Unexpected end of stream.</div><div class="line">	at redis.clients.util.RedisInputStream.ensureFill(RedisInputStream.java:198) ~[jedis-2.7.3.jar:na]</div><div class="line">	at redis.clients.util.RedisInputStream.readByte(RedisInputStream.java:40) ~[jedis-2.7.3.jar:na]</div><div class="line">	at redis.clients.jedis.Protocol.process(Protocol.java:141) ~[jedis-2.7.3.jar:na]</div><div class="line">	at redis.clients.jedis.Protocol.read(Protocol.java:205) ~[jedis-2.7.3.jar:na]</div><div class="line">	at redis.clients.jedis.Connection.readProtocolWithCheckingBroken(Connection.java:297) ~[jedis-2.7.3.jar:na]</div><div class="line">	at redis.clients.jedis.Connection.getBinaryBulkReply(Connection.java:216) ~[jedis-2.7.3.jar:na]</div><div class="line">	at redis.clients.jedis.BinaryJedis.get(BinaryJedis.java:159) ~[jedis-2.7.3.jar:na]</div><div class="line">	at org.springframework.data.redis.connection.jedis.JedisConnection.get(JedisConnection.java:1120) ~[spring-data-redis-1.6.1.RELEASE.jar:1.6.1.RELEASE]</div><div class="line">	... 84 common frames omitted</div></pre></td></tr></table></figure></p>
<p>　　起初以为是redis版本问题，后来发现Redis读取数据并不是每一次都出错，猜测可能是连接池问题，然后修改项目配置文件<code>testOnBorrow=true</code>,问题解决。<br><code>testOnBorrow</code>：在borrow一个jedis实例时，是否提前进行alidate操作；如果为true，则得到的jedis实例均是可用的；<br><code>testOnReturn</code>：在return给pool时，是否提前进行validate操作；<br>　　原来是连接池中空闲的连接过一阵子就会自动断开，但是连接池还以为连接正常,这样有时候访问Redis时，用了失效的连接，就会报错，这也就解释了为什么项目中不是总是抛异常而是偶尔发生错误。受Stack Overflow文章启发:</p>
<blockquote>
<p>However, testOnBorrow and testOnIdle are both false. Is it the case that one of the threads in the pool has a bad connection but wasn’t closed because the connection isn’t being pinged?</p>
</blockquote>
<p><a href="https://stackoverflow.com/questions/41746749/spring-data-redis-unexpected-end-of-stream-exception" target="_blank" rel="external">链接</a></p>
]]></content>
      
        <categories>
            
            <category> Redis </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[两种方式生成树形菜单]]></title>
      <url>/recursionMenu.html</url>
      <content type="html"><![CDATA[<h2 id="一、Java递归算法生成树形菜单"><a href="#一、Java递归算法生成树形菜单" class="headerlink" title="一、Java递归算法生成树形菜单"></a>一、Java递归算法生成树形菜单</h2><a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//合并前菜单</span></div><div class="line">List&lt;TMenu&gt; rootMenuList = xxxMapper.selectByxxx(params);</div><div class="line">List&lt;TMenu&gt; menuList = <span class="keyword">new</span> ArrayList&lt;TMenu&gt;();</div><div class="line"><span class="keyword">if</span> (<span class="keyword">null</span> != rootMenuList &amp;&amp; rootMenuList.size() &gt; <span class="number">0</span>) &#123;</div><div class="line">　　<span class="comment">// 一级菜单</span></div><div class="line">　　<span class="keyword">for</span> (TMenu menu : rootMenuList) &#123;</div><div class="line">　　　<span class="comment">//顶级菜单父级ID为0</span></div><div class="line">　　　<span class="keyword">if</span> (menu.getParAuthId() == <span class="number">0</span>) &#123;</div><div class="line">　　　　menuList.add(menu);</div><div class="line">　　　&#125;</div><div class="line">　　&#125;</div><div class="line">　　<span class="comment">//递归查询顶级菜单子菜单</span></div><div class="line">　　<span class="keyword">if</span> (<span class="keyword">null</span> != menuList &amp;&amp; menuList.size() &gt; <span class="number">0</span>) &#123;</div><div class="line">　　　　<span class="keyword">for</span> (TMenu menu : menuList) &#123;</div><div class="line">　　　　　　menu.setList(getChildMenuList(menu.getAuthId(),rootMenuList));</div><div class="line">　　　　&#125;</div><div class="line">　　&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment">* 查询子菜单</span></div><div class="line"><span class="comment">* <span class="doctag">@param</span> authId</span></div><div class="line"><span class="comment">* <span class="doctag">@param</span> rootMenuList</span></div><div class="line"><span class="comment">* <span class="doctag">@return</span></span></div><div class="line"><span class="comment">*/</span></div><div class="line"><span class="function"><span class="keyword">private</span> List&lt;TMenu&gt; <span class="title">getChildMenuList</span><span class="params">(Integer authId, List&lt;TMenu&gt; rootMenuList)</span> </span>&#123;</div><div class="line">　　List&lt;TMenu&gt; list = <span class="keyword">new</span> ArrayList&lt;TMenu&gt;();</div><div class="line">　　　　<span class="keyword">for</span> (TMenu menu : rootMenuList) &#123;</div><div class="line">　　　　　　<span class="keyword">if</span> (menu.getParAuthId() == authId) &#123;</div><div class="line">　　　　　　　　list.add(menu);</div><div class="line">　　　　　　&#125;</div><div class="line">　　　　&#125;</div><div class="line">　　<span class="keyword">if</span> (<span class="keyword">null</span> != list &amp;&amp; list.size() &gt; <span class="number">0</span>) &#123;</div><div class="line">　　　　<span class="keyword">for</span> (TMenu menu : list) &#123;</div><div class="line">　　　　　　menu.setList(getChildMenuList(menu.getAuthId(), rootMenuList));</div><div class="line">　　　　&#125;</div><div class="line">　　&#125;</div><div class="line">　　<span class="keyword">if</span> (<span class="keyword">null</span> != list &amp;&amp; list.size() == <span class="number">0</span>) &#123;</div><div class="line">　　　　<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">　　&#125;</div><div class="line">　　<span class="keyword">return</span> list;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="二、MyBatis-collection-集合"><a href="#二、MyBatis-collection-集合" class="headerlink" title="二、MyBatis collection 集合"></a>二、MyBatis collection 集合</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">　　<span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"NextTreeMap"</span> <span class="attr">type</span>=<span class="string">"Menu"</span>&gt;</span></div><div class="line">　　　　<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></div><div class="line">　　　　<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"name"</span> <span class="attr">property</span>=<span class="string">"name"</span>/&gt;</span></div><div class="line">　　　　<span class="tag">&lt;<span class="name">collection</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"next"</span> <span class="attr">javaType</span>=<span class="string">"java.util.ArrayList"</span></span></div><div class="line"><span class="tag">　　　　　　<span class="attr">ofType</span>=<span class="string">"Menu"</span> <span class="attr">select</span>=<span class="string">"getNextNodeTree"</span>/&gt;</span></div><div class="line">　　<span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></div><div class="line"></div><div class="line">　　<span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getNextNodeTree"</span> <span class="attr">resultMap</span>=<span class="string">"NextTreeMap"</span>&gt;</span></div><div class="line">　　　　SELECT</div><div class="line">　　　　　id,</div><div class="line">　　　　　name</div><div class="line">　　　　FROM node</div><div class="line">　　　　WHERE par_auth_id = #&#123;id&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></div></pre></td></tr></table></figure>
<p>　　这种方式当数据量大的时候，会产生大量的SELECT语句，效率低下，因此不推荐数据量大的树形菜单。</p>
]]></content>
      
        <categories>
            
            <category> 递归算法 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 树形菜单 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Nginx代理Tomcat服务器获取客户端真实IP]]></title>
      <url>/nginxIP.html</url>
      <content type="html"><![CDATA[<h4 id="一、背景"><a href="#一、背景" class="headerlink" title="一、背景"></a>一、背景</h4><p>　　Java Web项目中经常需要在后端获取前端IP，通过<code>request.getRemoteAddr()</code>这种方法只会获取到上一级的IP，在通过了Nginx，Apache等反向代理服务器，此方法获取的就是服务器的IP，而不是客户端的真实IP地址。<br>　　这是反向代理的原因,TCP连接是在代理和网站之间，而非用户与网站之间的；HTTP协议只是第七层协议，不会把IP层访问者的源IP信息同时发送。因此服务器无法得到客户端地真实IP，但是可以通过<code>X-Forwarded-For</code>绕过服务器IP地址过滤。<br><a id="more"></a></p>
<h4 id="X-Forwarded-For（简称XFF）"><a href="#X-Forwarded-For（简称XFF）" class="headerlink" title="X-Forwarded-For（简称XFF）"></a>X-Forwarded-For（简称XFF）</h4><div class="note success"><p>　　X-Forwarded-For是一个HTTP扩展头部。HTTP/1.1（RFC 2616）协议并没有对它的定义，它最开始是由Squid这个缓存代理软件引入，用来表示 HTTP 请求端真实 IP。如今它已经成为事实上的标准，被各大 HTTP 代理、负载均衡等转发服务广泛使用，并被写入 RFC 7239（Forwarded HTTP Extension）标准之中。<br>XFF的格式为：<code>X-Forwarded-For: client, proxy1, proxy2</code><br>　　XFF 的内容由「英文逗号 + 空格」隔开的多个部分组成，最开始的是离服务端最远的设备 IP，然后是每一级代理设备的 IP。（注意：如果未经严格处理，可以被伪造）</p></div>
<h4 id="二、解决方案"><a href="#二、解决方案" class="headerlink" title="二、解决方案"></a>二、解决方案</h4><p>在Nginx配置中的location节点中加入<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">proxy_set_header  Host  $host;</div><div class="line">proxy_set_header  X-Real-IP  $remote_addr;</div><div class="line">proxy_set_header  X-Forwarded-For  $proxy_add_x_forwarded_for;</div></pre></td></tr></table></figure></p>
<p>其中<code>$proxy_add_x_forwarded_for</code>会累加代理层的IP向后传递</p>
<p>服务器端通过<code>X-Forwarded-For</code>请求头获取IP<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getIpAddress</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</div><div class="line">　　String ipAddress = request.getHeader(<span class="string">"X-Forwarded-For"</span>);</div><div class="line">　　　　<span class="keyword">if</span> (ipAddress == <span class="keyword">null</span> || ipAddress.length() == <span class="number">0</span> </div><div class="line">　　　　　　　　|| <span class="string">"unknown"</span>.equalsIgnoreCase(ipAddress)) &#123;</div><div class="line">　　　　　　ipAddress = request.getHeader(<span class="string">"Proxy-Client-IP"</span>);</div><div class="line">　　　　&#125;</div><div class="line">　　　　<span class="keyword">if</span> (ipAddress == <span class="keyword">null</span> || ipAddress.length() == <span class="number">0</span> </div><div class="line">　　　　　　　　|| <span class="string">"unknown"</span>.equalsIgnoreCase(ipAddress)) &#123;</div><div class="line">　　　　　　ipAddress = request.getHeader(<span class="string">"WL-Proxy-Client-IP"</span>);</div><div class="line">　　　　&#125;</div><div class="line">　　　　<span class="keyword">if</span> (ipAddress == <span class="keyword">null</span> || ipAddress.length() == <span class="number">0</span> </div><div class="line">　　　　　　　　|| <span class="string">"unknown"</span>.equalsIgnoreCase(ipAddress)) &#123;</div><div class="line">　　　　　　ipAddress = request.getRemoteAddr();</div><div class="line">　　　　&#125;</div><div class="line">　　　　<span class="comment">// 对于通过多个代理的情况，第一个IP为客户端真实的IP地址，多个IP按照','分割</span></div><div class="line">　　　　<span class="keyword">if</span> (<span class="keyword">null</span> != ipAddress &amp;&amp; ipAddress.length() &gt; <span class="number">15</span>) &#123;</div><div class="line">　　　　<span class="comment">// "***.***.***.***".length() = 15</span></div><div class="line">　　　　<span class="keyword">if</span> (ipAddress.indexOf(<span class="string">","</span>) &gt; <span class="number">0</span>) &#123;</div><div class="line">　　　　　　ipAddress = ipAddress.substring(<span class="number">0</span>, ipAddress.indexOf(<span class="string">","</span>));</div><div class="line">　　　　&#125;</div><div class="line">　　&#125;</div><div class="line">　　<span class="keyword">return</span> ipAddress.equals(<span class="string">"0:0:0:0:0:0:0:1"</span>) ? <span class="string">"127.0.0.1"</span> : ipAddress;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="三、思考"><a href="#三、思考" class="headerlink" title="三、思考"></a>三、思考</h4><ul>
<li>通过<code>X-Forwarded-For</code>获取到了客户端真实IP，但其实际上是把IP放在请求头中传递给服务器端，所以这个XFF的名称是可以自定义的。比如可以定义为my-client-IP之类，然后记得在Web程序那边设定好去取这个名为my-client-IP的头标即可。</li>
<li>通过<code>request.getRemoteAddr()</code>获取的Remote Address无法伪造，因为建立 TCP 连接需要三次握手，如果伪造了源IP，无法建立TCP连接，更不会有后面的HTTP请求。但是在正常情况下，Web服务器获取Remote Address只会获取到上一级的IP。</li>
<li>当多层代理或使用CDN时，如果代理服务器不把用户的真实IP传递下去，那么业务服务器将永远不可能获取到用户的真实IP。</li>
<li><code>X-Forwarded-For</code>这种方式，客户端可以任意伪造IP，并且可以传入任意格式IP，这样会产生很多问题<ul>
<li>如果服务端通过IP做限制，前端很容易通过修改IP跳过限制。 </li>
<li>如果直接使用这样的IP，会带来SQL注入，服务端报错，跨站攻击等漏洞。</li>
</ul>
</li>
</ul>
<p>　投票系统就可能被这种方式伪造IP刷票。</p>
<p><a href="http://blog.csdn.net/caiqiiqi/article/details/72852083" target="_blank" rel="external">X-Forwarded-For绕过服务器IP地址过滤</a><br><a href="http://blog.csdn.net/bigtree_3721/article/details/72820081" target="_blank" rel="external">Nginx 如何配置来获取用户真实IP</a></p>
]]></content>
      
        <categories>
            
            <category> Nginx </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Nginx </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Nginx不转发某些http header问题]]></title>
      <url>/nginxHeader.html</url>
      <content type="html"><![CDATA[<p>当项目中使用自定义的请求头时，一定要注意请求头名称不能带有下划线，用Nginx做http代理时，像<code>token_id</code>这样的请求头，Nginx默认不转发，因为Nginx会默认过滤带有下划线的请求头。<br>解决办法：</p>
<ol>
<li>配置中http部分 增加<code>underscores_in_headers on;</code>配置。</li>
<li>用减号<code>-</code>替代下划线符号<code>_</code>，避免这种变态问题。或者不使用含有下划线的请求头。</li>
</ol>
<p><a href="http://blog.csdn.net/wx_mdq/article/details/10466891" target="_blank" rel="external">nginx 做proxy 不转发 http header问题解决</a></p>
]]></content>
      
        <categories>
            
            <category> Nginx </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Nginx </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[优秀文章汇总]]></title>
      <url>/mark.html</url>
      <content type="html"><![CDATA[<p><a href="http://blog.csdn.net/liusong0605/article/details/8623815" target="_blank" rel="external">权限管理及实现思路</a><br><a href="https://blog.csdn.net/yzllz001/article/details/54848513" target="_blank" rel="external">数据库性能优化详解</a></p>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Mybatis数据类型值为0时非空判断问题]]></title>
      <url>/mybatisZeroNull.html</url>
      <content type="html"><![CDATA[<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"age != null and age != ''"</span>&gt;</span></div><div class="line">　　#&#123;age,jdbcType=NUMERIC&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<p>当age为0时，此判断不成立，sql可能报错。导致错误原因是，0被视为false，<code>0 != &#39;&#39;</code>自然也不会成立，数字类型进行非空字符判断本身也不合理。解决此问题办法，如下去掉非空判断：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"age != null"</span>&gt;</span></div><div class="line">　　#&#123;age,jdbcType=NUMERIC&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> Mybatis </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Mybatis </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Next博客链接与常用Markdown语法]]></title>
      <url>/nextPage.html</url>
      <content type="html"><![CDATA[<p><a href="http://blog.ynxiu.com/2016/hexo-next-theme-optimize.html" target="_blank" rel="external">量子广告</a><br><a href="http://www.wuxubj.cn/" target="_blank" rel="external">务虚笔记</a><br><a href="https://ehlxr.me/" target="_blank" rel="external">小桥流水人家</a><br><a href="http://www.iamlj.com/" target="_blank" rel="external">Jing’s Blog</a><br><a href="https://notes.wanghao.work/" target="_blank" rel="external">Doublemine</a><br><a href="http://lovenight.github.io/" target="_blank" rel="external">岁月如歌</a><br><a href="http://hunao.info/" target="_blank" rel="external">胡闹的日子</a><br><a href="https://neveryu.github.io/" target="_blank" rel="external">Never_yu’s Blog </a></p>
<p><a href="http://blog.csdn.net/sunshine940326/article/details/70936988" target="_blank" rel="external">SEO优化博客</a><br><a id="more"></a></p>
<p>Bootstrap Callout<br><div class="note default"><p>Content (md partial supported) </p></div>
<div class="note primary"><p>Content (md partial supported) </p></div><br><div class="note success"><p>Content (md partial supported) </p></div>
<div class="note info"><p>Content (md partial supported) </p></div><br><div class="note warning"><p>Content (md partial supported) </p></div>
<div class="note danger"><p>Content (md partial supported) </p></div></p>
<p>将博客源文件上传至好hexo分支<br>deploy:</p>
<ul>
<li>type: git<br>repo: <a href="https://github.com/dx825951247/dx825951247.github.io.git" target="_blank" rel="external">https://github.com/dx825951247/dx825951247.github.io.git</a><br>branch: master</li>
<li>type: git<br>repo: <a href="https://github.com/dx825951247/dx825951247.github.io.git" target="_blank" rel="external">https://github.com/dx825951247/dx825951247.github.io.git</a><br>branch: hexo<br>extend_dirs: /<br>ignore_hidden: false<br>ignore_pattern:<pre><code>public: .
</code></pre></li>
<li>type: baidu_url_submitter</li>
</ul>
<p>Next标签插件<br>Code Block<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">alert(&apos;Hello World!&apos;);</div></pre></td></tr></table></figure></p>
<p>Pull Quote<br><blockquote class="pullquote [class]"><p>content</p>
</blockquote></p>
]]></content>
      
        <categories>
            
            <category> Next </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Next </tag>
            
            <tag> Markdown </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Mybatis返回结果集Map or 实体类]]></title>
      <url>/mybatisReturn.html</url>
      <content type="html"><![CDATA[<h4 id="观点1："><a href="#观点1：" class="headerlink" title="观点1："></a>观点1：</h4><div class="note primary"><p>一般的配置项表的结构不太会变化，服务层还有业务操作，使用实体类好些，如果返回结果是多层组合，返回结构字段可能经常变化，多表联合查询，使用Map好些。</p></div>
<a id="more"></a>
<h4 id="观点2："><a href="#观点2：" class="headerlink" title="观点2："></a>观点2：</h4><div class="note success"><p>使用Map可读性较差，当你前端用Map接收传递参数和mybatis返回用Map接收和传递参数，如果回头阅读代码，还得去看前端请求或者具体sql返回结果。如果是他人接手你的项目，得从头到尾得读一遍你的代码。如果你返回的是一个对象实体，那他就可以看到你返回的是什么，别人也就不需要再去看你代码了，提高了开发效率。</p></div>
<h4 id="观点3："><a href="#观点3：" class="headerlink" title="观点3："></a>观点3：</h4><div class="note info"><p>MyBatis也是ORM(Object Relational Mapping)框架的一员，使用Map从业界准则来看，不符合面向对象思想，这是一个代码规范问题。</p></div>
<h4 id="观点4："><a href="#观点4：" class="headerlink" title="观点4："></a>观点4：</h4><div class="note warning"><p>采用实体类比Map更耗费系统资源，如下图所示：</p></div>
<p><img src="/images/select.png">  </p>
]]></content>
      
        <categories>
            
            <category> Mybatis </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Mybatis </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Oracle创建自增长字段函数]]></title>
      <url>/increaseIdOracle.html</url>
      <content type="html"><![CDATA[<p>一.创建序列号<br><a id="more"></a><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">create sequence SEQ_VEN_CODE</div><div class="line">minvalue 1</div><div class="line">maxvalue 999999999999</div><div class="line">start with 74</div><div class="line">increment by 1</div><div class="line">nocache</div><div class="line">cycle;</div></pre></td></tr></table></figure></p>
<p>二.创建自增长函数<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">CREATE OR REPLACE FUNCTION FUN_VEN_CODE(VEN_TYPE VARCHAR2) RETURN VARCHAR2 IS</div><div class="line">  VEN_CODE VARCHAR2(30);</div><div class="line">BEGIN</div><div class="line">  IF VEN_TYPE = 'LOGISTICS' THEN</div><div class="line">    SELECT 'L' || LTRIM(TO_CHAR(SYSDATE, 'yyyymmdd')) ||</div><div class="line">           LPAD(SEQ_VEN_CODE.NEXTVAL, 5, '0')</div><div class="line">      INTO VEN_CODE</div><div class="line">      FROM DUAL;</div><div class="line">  ELSIF VEN_TYPE = 'GOODS' THEN</div><div class="line">    SELECT 'G' || LTRIM(TO_CHAR(SYSDATE, 'yyyymmdd')) ||</div><div class="line">           LPAD(SEQ_VEN_CODE.NEXTVAL, 5, '0')</div><div class="line">      INTO VEN_CODE</div><div class="line">      FROM DUAL;</div><div class="line">  END IF;</div><div class="line">  RETURN TRIM(VEN_CODE);</div><div class="line">EXCEPTION</div><div class="line">  WHEN OTHERS THEN</div><div class="line">    RETURN '0';</div><div class="line">END;</div></pre></td></tr></table></figure></p>
<p>三.查询</p>
<p><code>select FUN_VEN_CODE(&#39;LOGISTICS&#39;) from dual</code></p>
<p>结果：L2017101700072</p>
<p><code>select FUN_VEN_CODE(&#39;GOODS&#39;) from dual</code></p>
<p>结果：G2017101700073 </p>
]]></content>
      
        <categories>
            
            <category> Oracle </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Oracle </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ISODate转String]]></title>
      <url>/convertISODateToString.html</url>
      <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * convertISODateToString</span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> time 2017-09-07T16:00:00.000Z</span></div><div class="line"><span class="comment"> * <span class="doctag">@return</span></span></div><div class="line"><span class="comment"> */</span></div><div class="line"> &lt;!--more--&gt;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">convertISODateToString</span><span class="params">(String time)</span></span>&#123;  </div><div class="line">    <span class="keyword">if</span>(!time.matches(<span class="string">"\\d&#123;4&#125;-\\d&#123;2&#125;-\\d&#123;2&#125;T\\d&#123;2&#125;:\\d&#123;2&#125;:\\d&#123;2&#125;.\\d&#123;3&#125;Z"</span>))&#123;  </div><div class="line">	<span class="keyword">return</span> <span class="keyword">null</span>;  </div><div class="line">    &#125;</div><div class="line">    SimpleDateFormat sdf =   <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>); </div><div class="line">    time=time.replaceFirst(<span class="string">"T"</span>, <span class="string">" "</span>).replaceFirst(<span class="string">".\\d&#123;3&#125;Z"</span>, <span class="string">""</span>);</div><div class="line">    Date date;</div><div class="line">	<span class="keyword">try</span> &#123;</div><div class="line">		date = sdf.parse(time);</div><div class="line">		Calendar ca=Calendar.getInstance();  </div><div class="line">	    ca.setTime(date);  </div><div class="line">	    ca.add(Calendar.HOUR_OF_DAY, <span class="number">8</span>); </div><div class="line">	    time = sdf.format(ca.getTime());</div><div class="line">	&#125; <span class="keyword">catch</span> (ParseException e) &#123;</div><div class="line">		e.printStackTrace();</div><div class="line">	&#125;  </div><div class="line">    <span class="keyword">return</span> time;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><a href="http://www.028888.net/archives/2016_08_1480.html" target="_blank" rel="external">参考文章</a></p>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[业务流程异常处理]]></title>
      <url>/serviceException.html</url>
      <content type="html"><![CDATA[<h2 id="一、异常分类"><a href="#一、异常分类" class="headerlink" title="一、异常分类"></a>一、异常分类</h2><p>在web系统开发中，异常可大致分为:</p>
<ul>
<li><font color="#FF0000">系统异常:</font>软件的缺陷，客户端对此类异常是无能为力的,系统内部未知异常。</li>
<li><font color="#FF0000">业务异常</font>用户未按正常流程操作导致的异常。<a id="more"></a>
</li>
</ul>
<h2 id="二、处理方式"><a href="#二、处理方式" class="headerlink" title="二、处理方式"></a>二、处理方式</h2><p>在实际开发中，常见的异常处理方式有:<br>1.系统异常采用<code>try{}catch{}</code>处理,在<code>service</code>抛出异常，由<code>controller</code>层得到异常信息在返回,最好定义一个异常信息枚举类，集中记录异常信息：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line">`service`层：</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">		<span class="comment">//service代码</span></div><div class="line"></div><div class="line">	&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">		e.printStackTrace();</div><div class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> ServiceException(ErrorCode.SYSTEM_ERROR);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">枚举类`ErrorCode`：</div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span> </span></div><div class="line"><span class="comment"> * errorCode 错误代码  </span></div><div class="line"><span class="comment"> * sysMsg 系统显示信息（一般用于日志输出）</span></div><div class="line"><span class="comment"> * showMsg 页面显示信息（一般用于页面提示用户）</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">enum</span> ErrorCode &#123;</div><div class="line">	</div><div class="line">	SYSTEM_ERROR(<span class="number">10086</span>,<span class="string">""</span>,<span class="string">"系统异常！"</span>),</div><div class="line">	CODE_EXIST(<span class="number">101111101</span>,<span class="string">""</span>,<span class="string">"code码已存在已存在！"</span>);</div><div class="line"></div><div class="line">	<span class="keyword">int</span> errorCode;</div><div class="line">	String sysMsg;</div><div class="line">	String showMsg;</div><div class="line">	ErrorCode(<span class="keyword">int</span> errorCode, String sysMsg, String showMsg)&#123;</div><div class="line">		<span class="keyword">this</span>.errorCode = errorCode;</div><div class="line">		<span class="keyword">this</span>.sysMsg = sysMsg;</div><div class="line">		<span class="keyword">this</span>.showMsg = showMsg;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getErrorCode</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="keyword">return</span> errorCode;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getSysMsg</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="keyword">return</span> sysMsg;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getShowMsg</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="keyword">return</span> showMsg;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setShowMsg</span><span class="params">(String showMsg)</span></span>&#123;</div><div class="line">		<span class="keyword">this</span>.showMsg = showMsg;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSysMsg</span><span class="params">(String sysMsg)</span></span>&#123;</div><div class="line">		<span class="keyword">this</span>.sysMsg = sysMsg;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">`controller`层：</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">		</div><div class="line">		<span class="comment">//controller代码</span></div><div class="line">		</div><div class="line">	&#125; <span class="keyword">catch</span> (ModuleException e) &#123;</div><div class="line">		<span class="comment">//通过枚举类返回错误码和错误信息</span></div><div class="line">		<span class="keyword">return</span> ResponseError.create(e.getErrorCode().getErrorCode(),e.getErrorCode().getShowMsg());</div><div class="line">	&#125;</div></pre></td></tr></table></figure></p>
<p>2.业务异常可以采用<code>try{}catch{}</code>处理，或者采用<code>if</code>加错误码判断处理<br>如果采用<code>try{}catch{}</code>方式，和上面方式一致，下面介绍采用<code>if</code>加错误码处理,定义一个对象，每次处理加上返回码和错误信息提示。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ReturnResultObj obj = <span class="keyword">new</span> ReturnResultObj();</div><div class="line">obj.setCode(<span class="string">"101112101"</span>);</div><div class="line">obj.setMessage(<span class="string">"name不能为空!"</span>);</div><div class="line">obj.setData(<span class="string">""</span>);</div><div class="line"><span class="keyword">return</span> obj;</div></pre></td></tr></table></figure></p>
<h2 id="三、两种方式优缺点："><a href="#三、两种方式优缺点：" class="headerlink" title="三、两种方式优缺点："></a>三、两种方式优缺点：</h2><ul>
<li>用<code>if</code>加错误码控制业务流程,需要对每个接口的返回都要做一个错误码的校验,判断的代码会遍布在你的业务代码里面。优点就是对调用方,不必对你的接口进行异常校验,因为你的接口只可能返回「正确」或者「错误」,代码可读性高，但是随之带来的代码显得很臃肿，错误码集中在代码里，后期维护困难，但在效率上面也会更加高一点。对某些人来说,用错误码来控制业务流程更能符合「异常」的语义。</li>
<li>用<code>if</code>加错误码控制业务流程,因为没有抛出RuntimeException，如果在写操作之后加入业务判断，会导致事务无法回滚，因此写操作之前进行所有业务判断。</li>
<li>用异常来控制业务流程,可以把错误处理集中在一处,对客户端的代码编写更加友好,代码清晰简洁，在业务代码里面不会有很多错误码的判断。缺点就是创建异常堆栈是需要时间和空间的,异常处理性能开销在于<br>-是一个synchronized方法(主因)<br>-需要填充线程运行堆栈信息<br>但是可以通过复写业务异常基类的方法<code>Throwable.fillInStackTrace()</code>来提示性能。<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> Throwable <span class="title">fillInStackTrace</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>参考文章:<br><a href="https://segmentfault.com/q/1010000004308144?_ea=564305" target="_blank" rel="external">https://segmentfault.com/q/1010000004308144?_ea=564305</a><br><a href="http://blog.csdn.net/liujun13579/article/details/7742380" target="_blank" rel="external">http://blog.csdn.net/liujun13579/article/details/7742380</a></p>
]]></content>
      
        <categories>
            
            <category> 业务 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 业务，异常处理 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Mybatis嵌套查询两种方式]]></title>
      <url>/MybatisNestedSelect.html</url>
      <content type="html"><![CDATA[<h1 id="resultMap"><a href="#resultMap" class="headerlink" title="resultMap"></a>resultMap</h1><ul>
<li><code>constructor</code> - 类在实例化时,用来注入结果到构造方法中<ul>
<li><code>dArg</code> - ID 参数;标记结果作为 ID 可以帮助提高整体效能</li>
<li><code>arg</code> - 注入到构造方法的一个普通结果<a id="more"></a></li>
</ul>
</li>
<li><code>id</code> – 一个 ID 结果;标记结果作为 ID 可以帮助提高整体效能</li>
<li><code>result</code> – 注入到字段或 JavaBean 属性的普通结果</li>
<li><code>association</code> – 一个复杂的类型关联;许多结果将包成这种类型<br>  嵌入结果映射 – 结果映射自身的关联,或者参考一个</li>
<li><p><code>collection</code> – 复杂类型的集<br>　　+ <code>javaType</code> - 集合类型<br>　　+ <code>ofType</code> - 子对象的Java数据类型<br>　　+ <code>autoMapping</code> - 开启自动映射<br>  嵌套嵌入结果映射, 结果映射自身的集,或者参考一个</p>
<blockquote>
<p><code>collection</code>标签中的<code>select</code>属性，通过这个属性，通过ID引用另一个加载复杂类型的映射语句。<br>从指定列属性中返回的值，将作为参数设置给目标<code>select</code> 语句。<br>注意：在处理组合键时，也就是传入多个参数时，可以使用<code>column=”{pro1=col1,pro2=col2}”</code>这样的语法，这就会把<code>prop1</code>和<code>prop2</code>设置到目标嵌套语句的参数对象中，在子查询中就可以作为参数使用<code>#{pro1}</code>,<code>#{pro2}</code>。</p>
</blockquote>
</li>
<li><p><code>discriminator</code> – 使用结果值来决定使用哪个结果映射</p>
<ul>
<li><code>case</code> – 基于某些值的结果映射<br>嵌入结果映射 – 这种情形结果也映射它本身,因此可以包含很多相 同的元素,或者它可以参照一个外部的结果映射。</li>
</ul>
</li>
</ul>
<h1 id="第一种：子查询"><a href="#第一种：子查询" class="headerlink" title="第一种：子查询"></a>第一种：子查询</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getTest"</span> <span class="attr">parameterType</span>=<span class="string">"Test"</span> <span class="attr">resultMap</span>=<span class="string">"getTestMap"</span>&gt;</span></div><div class="line">　select </div><div class="line">　　AAA, </div><div class="line">　　BBB, </div><div class="line">　　CCC</div><div class="line">　from test </div><div class="line">　where </div><div class="line">　　'1' = '1'</div><div class="line">　and </div><div class="line">　　AAA = #&#123;aaa,jdbcType=VARCHAR&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"getTestMap"</span> <span class="attr">type</span>=<span class="string">"Test"</span>&gt;</span></div><div class="line">　<span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"AAA"</span> <span class="attr">property</span>=<span class="string">"aaa"</span> <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span> /&gt;</span></div><div class="line">　<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"BBB"</span> <span class="attr">property</span>=<span class="string">"bbb"</span> <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span> /&gt;</span></div><div class="line">　<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"CCC"</span> <span class="attr">property</span>=<span class="string">"ccc"</span> <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span> /&gt;</span></div><div class="line">　<span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"valueList"</span> <span class="attr">column</span>=<span class="string">"&#123;aaa=AAA,bbb=BBB&#125;"</span> <span class="attr">ofType</span>=<span class="string">"TestValue"</span> <span class="attr">javaType</span>=<span class="string">"ArrayList"</span> <span class="attr">select</span>=<span class="string">"selectTestValues"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectTestValues"</span> <span class="attr">resultMap</span>=<span class="string">"selectTestValuesMap"</span>&gt;</span></div><div class="line">　select </div><div class="line">　　DDD, </div><div class="line">　　EEE</div><div class="line">　from test_value</div><div class="line">　where </div><div class="line">　　AAA = #&#123;aaa,jdbcType=VARCHAR&#125;</div><div class="line">　and </div><div class="line">　　BBB = #&#123;bbb,jdbcType=VARCHAR&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"selectTestValuesMap"</span> <span class="attr">type</span>=<span class="string">"TestValue"</span> &gt;</span></div><div class="line">　<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"DDD"</span> <span class="attr">property</span>=<span class="string">"ddd"</span> <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span> /&gt;</span></div><div class="line">　<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"EEE"</span> <span class="attr">property</span>=<span class="string">"eee"</span> <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></div></pre></td></tr></table></figure>
<h1 id="第二种"><a href="#第二种" class="headerlink" title="第二种"></a>第二种</h1><p>多表连接把所有结果查询出来，resultMap开启开启自动映射或着在resultMap中填写需要合并的字段，这种方式由于是先查出所有结果，然后利用resultMap对结果合并，所以分页很难做。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"getTestMap"</span> <span class="attr">type</span>=<span class="string">"Test"</span>&gt;</span></div><div class="line">　<span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"AAA"</span> <span class="attr">property</span>=<span class="string">"aaa"</span> <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span> /&gt;</span></div><div class="line">　<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"BBB"</span> <span class="attr">property</span>=<span class="string">"bbb"</span> <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span> /&gt;</span></div><div class="line">　<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"CCC"</span> <span class="attr">property</span>=<span class="string">"ccc"</span> <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span> /&gt;</span></div><div class="line">　<span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"valueList"</span> <span class="attr">ofType</span>=<span class="string">"TestValue"</span> <span class="attr">javaType</span>=<span class="string">"ArrayList"</span> <span class="attr">autoMapping</span>=<span class="string">"true"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>或者：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"getTestMap"</span> <span class="attr">type</span>=<span class="string">"Test"</span>&gt;</span></div><div class="line">　<span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"AAA"</span> <span class="attr">property</span>=<span class="string">"aaa"</span> <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span> /&gt;</span></div><div class="line">　<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"BBB"</span> <span class="attr">property</span>=<span class="string">"bbb"</span> <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span> /&gt;</span></div><div class="line">　<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"CCC"</span> <span class="attr">property</span>=<span class="string">"ccc"</span> <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span> /&gt;</span></div><div class="line">　<span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"valueList"</span> <span class="attr">ofType</span>=<span class="string">"TestValue"</span> <span class="attr">javaType</span>=<span class="string">"ArrayList"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"DDD"</span> <span class="attr">property</span>=<span class="string">"ddd"</span> <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span> /&gt;</span></div><div class="line">　  <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"EEE"</span> <span class="attr">property</span>=<span class="string">"eee"</span> <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">collection</span>&gt;</span>	</div><div class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> Mybatis </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Oracle </tag>
            
            <tag> Mybatis </tag>
            
            <tag> 管理查询 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Oracle数据库批量插入、批量更新]]></title>
      <url>/oracleInsert.html</url>
      <content type="html"><![CDATA[<h1 id="一-xml中批量插入三种方式"><a href="#一-xml中批量插入三种方式" class="headerlink" title="一.xml中批量插入三种方式"></a>一.xml中批量插入三种方式</h1><blockquote>
<h2 id="1-使用union-all"><a href="#1-使用union-all" class="headerlink" title="1.使用union all"></a>1.使用union all</h2></blockquote>
<ul>
<li>sql中没有VALUES</li>
<li><foreach>中的select…插入数据…from dual<a id="more"></a>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">2017/10/18</div><div class="line">INSERT INTO STUDENT</div><div class="line">　(</div><div class="line">　　NAME，</div><div class="line">　　AGE</div><div class="line">　)</div><div class="line"><span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"templateDetial"</span> <span class="attr">item</span>=<span class="string">"item"</span> <span class="attr">index</span>=<span class="string">"index"</span> <span class="attr">separator</span>=<span class="string">"union all"</span> &gt;</span></div><div class="line">　SELECT </div><div class="line">　　#&#123;item.name&#125;, </div><div class="line">　　#&#123;item.age&#125;</div><div class="line">　FROM DUAL	</div><div class="line"><span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></div></pre></td></tr></table></figure>
</foreach></li>
</ul>
<hr>
<blockquote>
<h2 id="2-insert-all"><a href="#2-insert-all" class="headerlink" title="2.insert all"></a>2.insert all</h2></blockquote>
<ul>
<li>sql中有<code>VALUES</code></li>
<li><p>分隔符是空格,这种方式可以返回插入总条数</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">INSERT ALL</div><div class="line">　<span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"list"</span> <span class="attr">item</span>=<span class="string">"item"</span> <span class="attr">index</span>=<span class="string">"index"</span> <span class="attr">separator</span>=<span class="string">" "</span>&gt;</span></div><div class="line">　　INTO STUDENT</div><div class="line">　　　(</div><div class="line">　　　　NAME，</div><div class="line">　　　　AGE</div><div class="line">　　　)</div><div class="line">　　　　VALUES(</div><div class="line">	#&#123;item.name&#125;, </div><div class="line">　　　　#&#123;item.age&#125;</div><div class="line">　　　)</div><div class="line">　<span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></div><div class="line">SELECT 1 FROM DUAL</div></pre></td></tr></table></figure>
</li>
<li><p>批量插入多表</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">INSERT ALL</div><div class="line">　<span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"carouselList"</span> <span class="attr">item</span>=<span class="string">"item"</span> <span class="attr">index</span>=<span class="string">"index"</span> <span class="attr">separator</span>=<span class="string">" "</span>&gt;</span></div><div class="line">　　INTO STUDENT</div><div class="line">　　　(</div><div class="line">　　　　NAME，</div><div class="line">　　　　AGE</div><div class="line">　　　)</div><div class="line">　　　　VALUES(</div><div class="line">	#&#123;item.name&#125;, </div><div class="line">　　　　#&#123;item.age&#125;</div><div class="line">　　　)</div><div class="line">    INTO STUDENT2</div><div class="line">　　　(</div><div class="line">　　　　NAME2，</div><div class="line">　　　　AGE2</div><div class="line">　　　)</div><div class="line">　　　　VALUES(</div><div class="line">	#&#123;item.name&#125;, </div><div class="line">　　　　#&#123;item.age&#125;</div><div class="line">　　　)</div><div class="line">　<span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></div><div class="line">SELECT 1 FROM DUAL</div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<blockquote>
<h2 id="3-begin-end模式"><a href="#3-begin-end模式" class="headerlink" title="3.begin end模式"></a>3.begin end模式</h2></blockquote>
<ul>
<li>分隔符是 ;插入成功，返回插入总条数始终未-1<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"list"</span> <span class="attr">item</span>=<span class="string">"item"</span> <span class="attr">index</span>=<span class="string">"index"</span> <span class="attr">open</span>=<span class="string">"begin"</span> <span class="attr">close</span>=<span class="string">";end;"</span> <span class="attr">separator</span>=<span class="string">";"</span>&gt;</span></div><div class="line">　INSERT INTO STUDENT</div><div class="line">　　(</div><div class="line">　　　NAME，</div><div class="line">　　　AGE</div><div class="line">　　)</div><div class="line">　VALUES(</div><div class="line">　　　#&#123;item.name&#125;, </div><div class="line">　　　#&#123;item.age&#125;</div><div class="line">　　)</div><div class="line"><span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<h1 id="二-在代码中使用batch模式-效率最高"><a href="#二-在代码中使用batch模式-效率最高" class="headerlink" title="二.在代码中使用batch模式,效率最高"></a>二.在代码中使用batch模式,效率最高</h1><p>Mybatis有三种执行器：</p>
<ul>
<li>SIMPLE是普通的执行器，相当于JDBC的<code>stmt.execute(sql)</code></li>
<li>REUSE执行器会重用预处理语句(<code>prepared statements</code>)，相当于JDBC重用一条sql，再通过stmt传入多项参数值，然后执行<code>stmt.executeUpdate()</code>或<code>stmt.executeBatch()</code></li>
<li>BATCH执行器将重用语句并执行批量更新，相当于JDBC语句的<code>stmt.addBatch(sql)</code>，即仅仅是将执行SQL加入到批量计划。当插入主键时不会抛出主键冲突等运行时异常，而只有临近<code>commit</code>前执行<code>stmt.execteBatch()</code>后才会抛出异常。<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</div><div class="line">　<span class="comment">//新获取一个模式为BATCH，自动提交为false的session</span></div><div class="line">　<span class="comment">//如果自动提交设置为true,将无法控制提交的条数，改为最后统一提交，可能导致内存溢出</span></div><div class="line">　SqlSession session = sqlSessionTemplate.getSqlSessionFactory().openSession(ExecutorType.BATCH, <span class="keyword">false</span>);</div><div class="line">　<span class="comment">//通过新的session获取mapper</span></div><div class="line">　testMapper = session.getMapper(testMapper.class);</div><div class="line">　<span class="keyword">int</span> size = <span class="number">10000</span>;</div><div class="line">　<span class="keyword">try</span> &#123;</div><div class="line">　　<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</div><div class="line">　　　Test test = <span class="keyword">new</span> Test();</div><div class="line">　　　test.setName(String.valueOf(System.currentTimeMillis()));</div><div class="line">　　　testMapper.insert(test);</div><div class="line">　　　<span class="keyword">if</span> (i % <span class="number">1000</span> == <span class="number">0</span> || i == size - <span class="number">1</span>) &#123;</div><div class="line">　　　　<span class="comment">//手动每1000个一提交，提交后无法回滚</span></div><div class="line">　　　　session.commit();</div><div class="line">　　　　<span class="comment">//清理缓存，防止溢出</span></div><div class="line">　　　　session.clearCache();</div><div class="line">　　　&#125;</div><div class="line">　　&#125;</div><div class="line">　&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">　　<span class="comment">//没有提交的数据可以回滚</span></div><div class="line">　　session.rollback();</div><div class="line">　&#125; <span class="keyword">finally</span> &#123;</div><div class="line">　　session.close();</div><div class="line">　&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<h1 id="三-批量更新"><a href="#三-批量更新" class="headerlink" title="三.批量更新"></a>三.批量更新</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateStudent"</span> <span class="attr">parameterType</span>=<span class="string">"java.util.List"</span>&gt;</span></div><div class="line">　<span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"list"</span> <span class="attr">item</span>=<span class="string">"item"</span> <span class="attr">index</span>=<span class="string">"index"</span> <span class="attr">open</span>=<span class="string">"begin"</span> <span class="attr">close</span>=<span class="string">";end;"</span> <span class="attr">separator</span>=<span class="string">";"</span>&gt;</span></div><div class="line">　　UPDATE </div><div class="line">　　　STUDENT</div><div class="line">　　SET </div><div class="line">　　　AGE = '0'</div><div class="line">　　WHERE</div><div class="line">　　　NAME = #&#123;item.name&#125; </div><div class="line">　<span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></div></pre></td></tr></table></figure>
<p>返回结果为 -1</p>
<p>参考链接<br><a href="http://www.cnblogs.com/duanxz/p/3838352.html" target="_blank" rel="external">MyBatis的几种批量操作</a><br><a href="http://www.blogjava.net/diggbag/articles/mybatis.html" target="_blank" rel="external">关于Mybatis的Batch模式性能测试及结论</a></p>
]]></content>
      
        <categories>
            
            <category> Oracle </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Oracle </tag>
            
            <tag> Mybatis </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
